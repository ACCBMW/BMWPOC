---
- name: Check pre-requisites
  import_tasks: pre_check.yml

#- name: print version
#  shell: echo {{check_version.stdout}} > /tmp/test

#- name: Ensure bash, OpenSSl, and libssl are the latest versions
#  zypper: name={{ item }} update_cache={{ update_apt_cache }} state=latest
#  with_items:
#    - bash
#   - openssl
#  tags: packages
#  when: ansible_distribution == 'SLES'

- name: Ensure bash, OpenSSl, and libssl are the latest versions
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=latest
  with_items:
    - bash
    - openssl
  tags: packages
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Ensure bash, OpenSSl, and libssl are the latest versions
  yum: name={{ item }} update_cache={{ update_apt_cache }} state=latest
  with_items:
    - bash
    - openssl
  tags: packages
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: Install PostgreSQL
  zypper: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - "{{ version }}"
  tags: packages
  when: ansible_distribution == 'SLES'

- name: contrib
  set_fact:
    contribpack: "{{ version | regex_replace('server','contrib')}}"
  
- name: Install PostgreSQL
  zypper: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
#    - postgresql{{check_version.stdout}}
    - "{{ contribpack }}"
#    - postgresql{{check_version.stdout}}-server
  tags: packages
  when: ansible_distribution == 'SLES'

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql{{check_version.stdout}}
    - postgresql{{check_version.stdout}}-contrib
    - postgresql{{check_version.stdout}}-server
  tags: packages
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install PostgreSQL
  yum: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql*
  tags: packages
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Post-checks
  import_tasks: post_check.yml

#- name: postgresql db creation
#  postgresql_db:
#    name: mynewdb
